(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{325:function(t,e,n){"use strict";n.r(e);var r=n(1),s=Object(r.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[t._m(0),t._m(1),t._m(2),n("p",[t._v("npm是围绕着 "),n("a",{attrs:{href:"http://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("语义版本控制（semver）"),n("OutboundLink")],1),t._v(" 的思想而设计的，下面是从他们的网站摘抄过来的：")]),t._m(3),t._m(4),t._m(5),n("p",[t._v("package.json 像这样")]),t._m(6),t._m(7),t._m(8),t._m(9),n("p",[t._v("在版本号 lodash 之前有个 "),n("code",[t._v("^")]),t._v(" 字符。这个字符告诉 npm，安装主版本等于4的任意一个版本即可。所以如果我现在运行 npm 进行安装，npm 将安装 lodash 的主版本为4的最新版，可能是 lodash@4.25.5（@是npm约定用来确定包名的指定版本的）。可以在"),n("a",{attrs:{href:"https://docs.npmjs.com/misc/semver",target:"_blank",rel:"noopener noreferrer"}},[t._v("此处"),n("OutboundLink")],1),t._v("查看所有支持的字符。")]),n("p",[t._v("理论上，次版本号的变化并不会影响向后兼容性。因此，安装最新版的依赖库应该是能正常工作的，而且能引入自4.17.4版本以后的重要错误和安全方面的修复。")]),n("p",[t._v("但是，另一方面，即使不同的开发人员使用了相同的 package.json 文件，在他们自己的机器上也可能会安装同一个库的不同种版本，这样就会存在潜在的难以调试的错误和 “在我的电脑上…” 的情形。")]),n("p",[t._v("大多数 npm 库都严重依赖于其他 npm 库，这会导致嵌套依赖关系，并增加无法匹配相应版本的几率。")]),t._m(10),t._m(11),n("p",[t._v("然而，即使存在 npm-shrinkwrap.json 这个文件，npm 也只会锁定库的版本，而不是库的内容。即便 npm 现在也能阻止用户多次重复发布库的同一版本，但是 npm 管理员仍然具有强制更新某些库的权力。")]),n("p",[t._v("这是引用自 shrinkwrap 文档的内容：")]),n("p",[t._v("如果你希望锁定包中的特定字节，比如是为了保证能正确地重新部署或构建，那么你应该在源代码控制中检查依赖关系，或者采取一些其他的机制来校验内容，而不是靠校验版本。")]),t._m(12),t._m(13),t._m(14),n("p",[t._v("这个结构可能会很长。这对于基于 Unix 的操作系统来说只不过是一个小烦恼，但对于 Windows 来说却是个破坏性的东西，因为有很多程序无法处理超过 260 个字符的文件路径名。")]),t._m(15),t._m(16),t._m(17),t._m(18),n("p",[t._v("可以在"),n("a",{attrs:{href:"https://docs.npmjs.com/how-npm-works/npm3",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),n("OutboundLink")],1),t._v(" 阅读到更多有关 NPM 3 依赖解析的工作原理。")]),n("p",[t._v("这种方法的缺点是，npm 必须首先遍历所有的项目依赖关系，然后再决定如何生成扁平的 "),n("code",[t._v("node_modules")]),t._v(" 目录结构。npm 必须为所有使用到的模块构建一个完整的依赖关系树，这是一个耗时的操作，是"),n("a",{attrs:{href:"https://github.com/npm/npm/issues/8826",target:"_blank",rel:"noopener noreferrer"}},[t._v("npm安装速度慢的一个很重要的原因"),n("OutboundLink")],1),t._v("。")]),t._m(19),t._m(20),t._m(21),n("p",[t._v("注意，需要同时修改环境变量，否则不能在全局使用相关命令")]),t._m(22),t._m(23),t._m(24),t._m(25),t._m(26),t._m(27),t._m(28),t._m(29),t._m(30),t._m(31),t._m(32),n("p",[t._v("详细教程可以参考阮大大的 "),n("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《npm scripts 使用指南》"),n("OutboundLink")],1),t._v("，此处仅作为抛砖引玉。")]),t._m(33),n("p",[t._v("Yarn 是 Facebook, Google, Exponent 和 Tilde 开发的一款新的 JavaScript 包管理工具。就像我们可以从官方文档了解那样，它的目的是解决这些团队使用 npm 面临的少数问题，即：")]),t._m(34),n("p",[t._v("每当 npm 或 Yarn 需要安装一个包时，它会进行一系列的任务。在 npm 中这些任务是按包的顺序一个个执行，这意味着必须等待上一个包被完整安装才会进入下一个；Yarn 则并行的执行这些任务，提高了性能。")]),t._m(35),t._m(36),n("p",[t._v("理想状态下使用"),n("a",{attrs:{href:"http://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("语义化版本"),n("OutboundLink")],1),t._v("发布补丁不会包含大的变化，但不幸的是这必非真理。npm 的这种策略可能导致两台拥有相同 "),n("code",[t._v("package.json")]),t._v(" 文件的机子安装了不同版本的包，这可能导致一些错误。")]),t._m(37),t._m(38),n("ol",[n("li",[n("a",{attrs:{href:"https://yarnpkg.com/en/docs/configuration#toc-use-yarn-lock-to-pin-your-dependencies",target:"_blank",rel:"noopener noreferrer"}},[t._v("yarn.lock 文档"),n("OutboundLink")],1)]),n("li",[n("a",{attrs:{href:"https://docs.npmjs.com/cli/shrinkwrap",target:"_blank",rel:"noopener noreferrer"}},[t._v("npm shrinkwrap 文档"),n("OutboundLink")],1)])]),t._m(39),n("p",[t._v("yarn 相关文档: "),n("a",{attrs:{href:"https://yarn.bootcss.com/docs/cli/",target:"_blank",rel:"noopener noreferrer"}},[t._v("中文文档"),n("OutboundLink")],1),t._v("、"),n("a",{attrs:{href:"https://yarnpkg.com/en/docs/cli/",target:"_blank",rel:"noopener noreferrer"}},[t._v("英文文档"),n("OutboundLink")],1)]),n("p",[t._v("npm 相关文档: "),n("a",{attrs:{href:"https://docs.npmjs.com/cli/",target:"_blank",rel:"noopener noreferrer"}},[t._v("英文文档"),n("OutboundLink")],1)]),n("p",[t._v("命令对比: "),n("a",{attrs:{href:"https://yarn.bootcss.com/docs/migrating-from-npm.html#toc-cli-commands-comparison",target:"_blank",rel:"noopener noreferrer"}},[t._v("从 npm 迁移到 Yarn"),n("OutboundLink")],1)]),n("p",[t._v("全局安装")]),t._m(40),n("p",[t._v("局部安装")]),t._m(41),n("p",[t._v("初始化依赖淡妆")]),t._m(42),n("p",[t._v("卸载包")]),t._m(43),t._m(44),t._m(45),t._m(46),t._m(47),t._m(48),n("hr"),n("p",[n("a",{attrs:{href:"https://docs.npmjs.com/cli/cache",target:"_blank",rel:"noopener noreferrer"}},[t._v("npm cache"),n("OutboundLink")],1),t._m(49),t._v(" 提供了三个命令，分别是 "),n("code",[t._v("npm cache add")]),t._v(", "),n("code",[t._v("npm cache clean")]),t._v(", "),n("code",[t._v("npm cache verify")]),t._v("。")]),t._m(50),n("hr"),t._m(51),t._m(52),t._m(53),t._m(54),t._m(55),n("hr"),t._m(56),n("p",[t._v("目前没有提供用户自己管理缓存数据的命令，随着你不断安装新的模块，缓存数据也会越来越多，因为 npm 不会自己删除数据。")]),t._m(57),n("p",[t._v("Yarn 发布于 2016年10月，并在 Github 上迅速拥有了 2.4万个 Star。而 npm 只有 1.2万个 Star。这个项目由一些高级开发人员维护，包括了 Sebastian McKenzie（"),n("a",{attrs:{href:"https://babeljs.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Babel.js"),n("OutboundLink")],1),t._v("）和Yehuda Katz（"),n("a",{attrs:{href:"https://www.emberjs.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ember.js"),n("OutboundLink")],1),t._v("、"),n("a",{attrs:{href:"https://www.rust-lang.org/en-US/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rust"),n("OutboundLink")],1),t._v("、"),n("a",{attrs:{href:"http://bundler.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bundler"),n("OutboundLink")],1),t._v("等）。")]),t._m(58),t._m(59),n("p",[t._v("由于 yarn 是崭新的经过重新设计的 npm 客户端，它能让开发人员并行化处理所有必须的操作，并添加了一些其他改进，这使得运行速度得到了显著的提升，整个安装时间也变得更少。我估计，速度提升是 yarn 受欢迎的主要原因。")]),t._m(60),t._m(61),n("p",[n("a",{attrs:{href:"https://yarnpkg.com/en/docs/cli/cache",target:"_blank",rel:"noopener noreferrer"}},[t._v("yarn cache"),n("OutboundLink")],1),t._v(" 提供了三个命令，分别是 "),n("code",[t._v("yarn cache ls")]),t._v(", "),n("code",[t._v("yarn cache dir")]),t._v(", "),n("code",[t._v("yarn cache clean")]),t._v("。")]),t._m(62),n("p",[t._v("yarn 还提供了一些其他改进，例如，它允许合并项目中使用到的所有的包的许可证，这一点让人很高兴。")]),n("p",[t._v("设置 yarn 缓存目录")]),t._m(63),n("hr"),t._m(64),n("p",[t._v("另外 yarn 还支持配置离线镜像，通过以下命令设置离线缓存仓库。具体细节参照官方博客"),n("a",{attrs:{href:"https://yarnpkg.com/blog/2016/11/24/offline-mirror/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Running Yarn offline》"),n("OutboundLink")],1),t._v("。可设置为")]),t._m(65),n("hr"),n("p",[t._v("一个有趣的事情是，yarn 文档的态度开始针对 npm 发生改变，因为 yarn 项目变得流行起来。")]),n("p",[t._v("最开始的 yarn 公告是这么介绍 yarn 的安装的：")]),n("p",[t._v("最简单的入门方法是运行：")]),t._m(66),n("p",[t._v("现在的 yarn 安装页面是这么说的：")]),t._m(67),t._m(68),n("p",[t._v("以这种速度发展下去的话，如果 yarn 要宣布他们自己的 registry，让开发者慢慢淘汰 npm 的话，我们一点都不会感到惊讶。")]),n("p",[t._v("看起来似乎要感谢 yarn，npm 终于意识到他们需要更加关注一些大家强烈要求的问题了。当我在审核我之前提到的强烈要求的 “离线” 功能时，我注意到这个需求正在被积极地修复之中。")]),t._m(69),n("p",[n("a",{attrs:{href:"https://github.com/pnpm/pnpm",target:"_blank",rel:"noopener noreferrer"}},[t._v("pnpm"),n("OutboundLink")],1),t._m(70),t._v(" 是又一个 Node.js 包管理工具。它可以替换 npm， 而且 npm 更快更高效。")]),n("p",[t._v("能有多快? "),n("em",[t._v("3 倍！")]),t._v(" 可以在"),n("a",{attrs:{href:"https://github.com/pnpm/node-package-manager-benchmark",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),n("OutboundLink")],1),t._v(" 查看 benchmarks 。")]),n("p",[t._v("为什么更高效？ 当你安装一个软件包，我们把它保存在你的机器上的一个全局存储目录中，然后我们创建一个硬链接而不是复制。 对于模块的每个版本，只会有一个副本保存在磁盘上。 例如，当使用 npm 或 yarn 时，如果有 100 个使用 lodash 的项目，你的磁盘上就会有有 100 份 lodash 的拷贝。pnpm 能帮助您节省千兆字节的磁盘空间！")]),n("p",[t._v("安装 pnpm")]),t._m(71),n("p",[t._v("pnpm 的使用同 npm")]),t._m(72),n("p",[n("a",{attrs:{href:"https://github.com/pnpm/pnpm",target:"_blank",rel:"noopener noreferrer"}},[t._v("github 仓库地址"),n("OutboundLink")],1)]),t._m(73),t._m(74),t._m(75),n("p",[t._v("与 npm@3 不同，pnpm 试图解决 npm@2 所具有的问题，而不是将依赖关系树展平。 在由 pnpm 创建的 node_modules 文件夹中，所有的软件包都有自己的依赖关系，但是目录树永远不会像 npm@2 那么深。 pnpm 保持所有依赖关系平坦，但使用符号链接将它们组合在一起。")]),t._m(76),n("p",[t._v("要查看实例，请访问 "),n("a",{attrs:{href:"https://github.com/pnpm/sample-project",target:"_blank",rel:"noopener noreferrer"}},[t._v("示例 pnpm 项目"),n("OutboundLink")],1),t._v("。")]),t._m(77),t._m(78),t._m(79),t._m(80),n("p",[t._v("npm 高于 5.6 的时候容易出现此问题，降低版本即可，但我到现在并未探索出问题的原因，或许是npm自身版本的问题。")]),n("p",[t._v("参考:")]),n("p",[t._v("https://github.com/npm/npm/issues/19989")]),t._m(81),n("p",[n("a",{attrs:{href:"https://www.cnblogs.com/dapenglalala/p/6511557.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("yarn初学"),n("OutboundLink")],1)]),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/friendan/article/details/51736231",target:"_blank",rel:"noopener noreferrer"}},[t._v("更改npm全局模块和cache默认安装位置"),n("OutboundLink")],1)]),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/jeikerxiao/article/details/53887524",target:"_blank",rel:"noopener noreferrer"}},[t._v("npm - 换淘宝源"),n("OutboundLink")],1)]),n("hr",{staticClass:"footnotes-sep"}),n("section",{staticClass:"footnotes"},[n("ol",{staticClass:"footnotes-list"},[n("li",{staticClass:"footnote-item",attrs:{id:"fn1"}},[n("p",[n("a",{attrs:{href:"https://blog.csdn.net/qiansg123/article/details/80129453",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSDN: 一文看懂npm、yarn、pnpm之间的区别"),n("OutboundLink")],1),n("a",{staticClass:"footnote-backref",attrs:{href:"#fnref1"}},[t._v("↩︎")])])]),n("li",{staticClass:"footnote-item",attrs:{id:"fn2"}},[n("p",[n("a",{attrs:{href:"https://segmentfault.com/a/1190000009709213",target:"_blank",rel:"noopener noreferrer"}},[t._v("segmentFault: npm 和 yarn 缓存策略对比"),n("OutboundLink")],1),n("a",{staticClass:"footnote-backref",attrs:{href:"#fnref2"}},[t._v("↩︎")])])]),n("li",{staticClass:"footnote-item",attrs:{id:"fn3"}},[n("p",[n("a",{attrs:{href:"https://segmentfault.com/a/1190000013214927",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么我们应该使用 pnpm（译）"),n("OutboundLink")],1),n("a",{staticClass:"footnote-backref",attrs:{href:"#fnref3"}},[t._v("↩︎")])])])])])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"关于-npm-与-yarn-等一些-node-包管理工具的一些探索"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于-npm-与-yarn-等一些-node-包管理工具的一些探索","aria-hidden":"true"}},[this._v("$")]),this._v(" 关于 npm 与 yarn 等一些 node 包管理工具的一些探索")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"npm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm","aria-hidden":"true"}},[this._v("$")]),this._v(" npm")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("npm是Node.js能够如此成功的主要原因之一。npm团队做了很多的工作，以确保npm保持向后兼容，并在不同的环境中保持一致"),e("sup",{staticClass:"footnote-ref"},[e("a",{attrs:{href:"#fn1",id:"fnref1"}},[this._v("[1]")])]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("em",[this._v("给定一个版本号：主版本号.次版本号.补丁版本号， 以下这三种情况需要增加相应的版本号:")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("em",[this._v("主版本号： 当API发生改变，并与之前的版本不兼容的时候")])]),e("li",[e("em",[this._v("次版本号： 当增加了功能，但是向后兼容的时候")])]),e("li",[e("em",[this._v("补丁版本号： 当做了向后兼容的缺陷修复的时候")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("code",[t._v("npm")]),t._v(" 使用一个名为 "),n("code",[t._v("package.json")]),t._v(" 的文件，用户可以通过 "),n("code",[t._v("npm i --save")]),t._v(" 命令把项目里所有的依赖项保存在这个文件里，如果通过 "),n("code",[t._v("npm i --save-dev")]),t._v(" 安装的依赖只在开发环境起效。("),n("code",[t._v("i")]),t._v(" 是 "),n("code",[t._v("install")]),t._v(" 的缩写)")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token property"}},[t._v('"dependencies"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token property"}},[t._v('"devDependencies"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"关于-package-json-中的版本号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于-package-json-中的版本号","aria-hidden":"true"}},[this._v("$")]),this._v(" 关于 "),e("code",[this._v("package.json")]),this._v(" 中的版本号")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("一个 "),e("code",[this._v("package.json")]),this._v(" 文件可能长这样:")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token property"}},[t._v('"dependencies"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token property"}},[t._v('"lodash"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"^4.17.4"')]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("虽然可以通过 "),e("code",[this._v("npm config set save-exact true")]),this._v(" 命令关闭在版本号前面使用^的默认行为，但这个只会影响顶级依赖关系。由于每个依赖的库都有自己的 package.json 文件，而在它们自己的依赖关系前面可能会有^符号，所以无法通过 package.json 文件为嵌套依赖的内容提供保证。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("为了解决这个问题，npm 提供了shrinkwrap 命令。此命令将生成一个 "),e("code",[this._v("npm-shrinkwrap.json")]),this._v(" 文件，为所有库和所有嵌套依赖的库记录确切的版本。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"npm2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm2","aria-hidden":"true"}},[this._v("$")]),this._v(" npm2")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("npm 2")]),this._v(" 会安装每一个包所依赖的所有依赖项。如果我们有这么一个项目，它依赖项目A，项目A依赖项目B，项目B依赖项目C，那么依赖树将如下所示：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("node_modules\n- package-A\n-- node_modules\n--- package-B\n----- node_modules\n------ package-C\n-------- some-really-really-really-long-file-name-in-package-c.js\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"npm3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm3","aria-hidden":"true"}},[this._v("$")]),this._v(" npm3")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("npm 3")]),this._v("采用了扁平依赖关系树来解决这个问题，所以我们的3个项目结构现在看起来如下所示：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("node_modules\n- package-A\n- package-B\n- package-C\n-- some-file-name-in-package-c.js\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这样，一个原来很长的文件路径名就从 "),e("code",[this._v("./node_modules/package-A/node_modules/package-B/node-modules/some-file-name-in-package-c.js")]),this._v(" 变成了 "),e("code",[this._v("/node_modules/some-file-name-in-package-c.js")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"npm-的配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm-的配置","aria-hidden":"true"}},[this._v("$")]),this._v(" npm 的配置")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("查看当前配置 "),e("code",[this._v("npm config ls")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("修改全局安装的包路径，也就是使用 "),e("code",[this._v("npm i -g xxx")]),this._v(" 安装的包，使用命令 "),e("code",[this._v('npm config set prefix "D:\\nodejs\\modules"')]),this._v(" 设置，跟上自定义的路径即可")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对于Windows自行百度添加到环境变量的方法，Linux使用命令 "),e("code",[this._v("export PATH=$PATH:/the/path/to/yarn/global/bin/")]),this._v(" 即可。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("修改缓存路径使用 "),e("code",[this._v('npm config set cache "D:\\nodejs\\cache"')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("设置安装源，例如使用淘宝源: "),e("code",[this._v("npm config set registry https://registry.npm.taobao.org/")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("设置完成后，使用 "),e("code",[this._v("npm config get registry")]),this._v(" 查看是否生效。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"npm-脚本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm-脚本","aria-hidden":"true"}},[this._v("$")]),this._v(" npm 脚本")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在 "),e("code",[this._v("package.json")]),this._v(" 中，有一个 "),e("code",[this._v("scripts")]),this._v(" 字段，用于制定个性化的命令。")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token property"}},[t._v('"scripts"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token property"}},[t._v('"build"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"node build.js"')]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("比如在里面加入 "),n("code",[t._v("build")]),t._v(" 命令，可以使用 "),n("code",[t._v("npm run build")]),t._v(" 或 "),n("code",[t._v("yarn build")]),t._v(" 来执行，实际执行的命令为 "),n("code",[t._v("node build.js")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在 "),e("code",[this._v("scripts")]),this._v(" 中有一个特殊的命令: "),e("code",[this._v("start")]),this._v("，可以直接使用 "),e("code",[this._v("npm start")]),this._v(" 来执行。")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token property"}},[t._v('"scripts"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token property"}},[t._v('"dev"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"node server.js"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token property"}},[t._v('"start"')]),n("span",{attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v('"npm run dev"')]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("此处，执行 "),e("code",[this._v("npm start")]),this._v("，实际执行的命令为 "),e("code",[this._v("node server.js")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"yarn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yarn","aria-hidden":"true"}},[this._v("$")]),this._v(" yarn")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("安装的时候无法保证速度/一致性")]),e("li",[this._v("安全问题，因为 npm 安装时允许运行代码")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"yarn-lock-文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yarn-lock-文件","aria-hidden":"true"}},[this._v("$")]),this._v(" yarn.lock 文件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("npm 和 Yarn 都使用 "),e("code",[this._v("package.json")]),this._v(" 来跟踪项目的依赖，版本号并非一直准确，因为你可以定义版本号范围，这样你可以选择一个主版本和次要版本的包，但让 npm 安装最新的补丁也许可以修改一些 bug。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("为了避免包版本的错误匹配，一个确定的安装版本被固定在一个锁文件中。每次模块被添加时，Yarn 就会创建（或更新）"),e("code",[this._v("yarn.lock")]),this._v(" 文件，这样你就可以保证其它机子也安装相同版本的包，同时包含了 "),e("code",[this._v("package.json")]),this._v(" 中定义的一系列允许的版本。")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("在 npm 中同样可以使用 "),n("code",[t._v("npm shrinkwrap")]),t._v(" 命令来生成一个锁文件，这样在使用 "),n("code",[t._v("npm install")]),t._v(" 时会在读取 "),n("code",[t._v("package.json")]),t._v(" 前先读取这个文件，就像 Yarn 会先读取"),n("code",[t._v("yarn.lock")]),t._v(" 一样。这里的区别是 Yarn 总会自动更新 "),n("code",[t._v("yarn.lock")]),t._v("，而 npm 需要你重新操作。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"与-npm-命令对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#与-npm-命令对比","aria-hidden":"true"}},[this._v("$")]),this._v(" 与 npm 命令对比")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("yarn: "),e("code",[this._v("yarn global add package")])])]),e("li",[e("p",[this._v("npm: "),e("code",[this._v("npm i package -g")]),this._v(" 或 "),e("code",[this._v("npm i package --global")])])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[n("p",[t._v("yarn: "),n("code",[t._v("yarn add package")])])]),n("li",[n("p",[t._v("yarn 添加开发依赖 "),n("code",[t._v("yarn add package --dev")]),t._v(" 或 "),n("code",[t._v("yarn add package -D")])])]),n("li",[n("p",[t._v("npm: "),n("code",[t._v("npm i package --save")])])]),n("li",[n("p",[t._v("npm 添加开发依赖: "),n("code",[t._v("npm i package --save-dev")]),t._v(" 或 "),n("code",[t._v("npm i package -D")])])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[n("p",[t._v("yarn: "),n("code",[t._v("yarn")]),t._v(" 或 "),n("code",[t._v("yarn install")])])]),n("li",[n("p",[t._v("npm: "),n("code",[t._v("npm i")]),t._v(" 或 "),n("code",[t._v("npm install")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("yarn: "),e("code",[this._v("yarn remove package")])]),e("li",[this._v("npm: "),e("code",[this._v("npm uninstall --save package")]),this._v(" 或 "),e("code",[this._v("npm uninstall --save-dev package")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"npm-与-yarn-的缓存策略对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm-与-yarn-的缓存策略对比","aria-hidden":"true"}},[this._v("$")]),this._v(" npm 与 yarn 的缓存策略对比")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"npm-的缓存策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm-的缓存策略","aria-hidden":"true"}},[this._v("$")]),this._v(" npm 的缓存策略")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("npm 的缓存目录是通过 cache 变量指定的，一般默认是在 "),e("code",[this._v("~/.npm")]),this._v(" 文件夹（Windows 系统在 "),e("code",[this._v("%AppData%/npm-cache")]),this._v(" 文件夹），可以执行命令 "),e("code",[this._v("npm config get cache")]),this._v(" 查看")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在 npm@5 以前，每个缓存的模块在 "),e("code",[this._v("~/.npm")]),this._v(" 文件夹中以模块名的形式直接存储，例如 koa 模块存储在 "),e("code",[this._v("~/.npm/koa")]),this._v(" 文件夹中。而 npm@5 版本开始，数据存储在 "),e("code",[this._v("~/.npm/_cacache")]),this._v(" 中，并且不是以模块名直接存放。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("也可以通过 "),e("code",[this._v("npm config set cache path")]),this._v(" 来手动指定 npm 缓存目录。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("sup",{staticClass:"footnote-ref"},[e("a",{attrs:{href:"#fn2",id:"fnref2"}},[this._v("[2]")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[e("code",[this._v("npm cache add")]),this._v(" 官方解释说这个命令主要是 npm 内部使用，但是也可以用来手动给一个指定的 package 添加缓存。")])]),e("li",[e("p",[e("code",[this._v("npm cache clean")]),this._v(" 删除缓存目录下的所有数据。从 npm@5 开始，为了保证缓存数据的有效性和完整性，需要加上 --force 参数。")])]),e("li",[e("p",[e("code",[this._v("npm cache verify")]),this._v(" 验证缓存数据的有效性和完整性，清理垃圾数据。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("npm 提供了离线安装模式，使用 "),e("code",[this._v("--offline")]),this._v(", "),e("code",[this._v("--prefer-offline")]),this._v(", "),e("code",[this._v("--prefer-online")]),this._v(" 可以指定离线模式。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("--prefer-offline")]),this._v(" / "),e("code",[this._v("--prefer-online")]),this._v(" “离线优先/网络优先”模式。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果设置为 "),e("code",[this._v("--prefer-offline")]),this._v(" 则优先使用缓存数据，如果没有匹配的缓存数据，则从远程仓库下载。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果设置为 "),e("code",[this._v("--prefer-online")]),this._v(" 则优先使用网络数据，忽略缓存数据，这种模式可以及时获取最新的模块。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("--offline")]),this._v(" 完全离线模式，安装过程不需要网络，直接使用匹配的缓存数据，一旦缓存数据不存在，则安装失败。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("npm 的缓存是使用 pacote 模块进行下载和管理，基于 "),e("code",[this._v("cacache")]),this._v(" 缓存存储。由于 npm 会维护缓存数据的完整性，一旦数据发生错误，就回重新获取。因此不推荐手动清理缓存，除非需要释放磁盘空间，这也是要强制加上 "),e("code",[this._v("--force")]),this._v(" 参数的原因。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"yarn-的缓存策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#yarn-的缓存策略","aria-hidden":"true"}},[this._v("$")]),this._v(" yarn 的缓存策略")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("从我搜集到的情况来看，Yarn 一开始的主要目标是解决上一节中描述的由于语义版本控制而导致的 npm 安装的不确定性问题。虽然可以使用 "),e("code",[this._v("npm shrinkwrap")]),this._v(" 来实现可预测的依赖关系树，但它并不是默认选项，而是取决于所有的开发人员知道并且启用这个选项。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Yarn 采取了不同的做法。每个 yarn 安装都会生成一个类似于 "),e("code",[this._v("npm-shrinkwrap.json")]),this._v(" 的 "),e("code",[this._v("yarn.lock")]),this._v(" 文件，而且它是默认创建的。除了常规信息之外，"),e("code",[this._v("yarn.lock")]),this._v(" 文件还包含要安装的内容的校验和，以确保使用的库的版本相同。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("像 npm 一样，yarn 使用本地缓存。与 npm 不同的是，yarn 无需互联网连接就能安装本地缓存的依赖项，它提供了 "),e("mark",[this._v("离线模式")]),this._v("。这个功能在 2012年的 npm 项目中就被提出来过，但一直没有实现。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("yarn 缓存目录位于 "),e("code",[this._v("~/Library/Caches/Yarn")]),this._v(" 文件夹中，每个缓存的模块被存放在独立的文件夹，文件夹名称包含了模块名称、版本号等信息。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[e("code",[this._v("yarn cache ls")]),this._v(" 列出当前缓存的包列表。")])]),e("li",[e("p",[e("code",[this._v("yarn cache dir")]),this._v(" 显示缓存数据的目录。")])]),e("li",[e("p",[e("code",[this._v("yarn cache clean")]),this._v(" 清除所有缓存数据。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("yarn config set cache-folder <path>\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("yarn 也支持离线安装，yarn 默认会使用 "),n("code",[t._v("--prefer-online")]),t._v(" 的模式，也就是先尝试从远程仓库下载，如果连接失败则尝试从缓存读取。yarn 也提供了 "),n("code",[t._v("--offline")]),t._v("参数，即通过 "),n("code",[t._v("yarn add --offline")]),t._v(" 或 "),n("code",[t._v("--perfer-offline")]),t._v(" 安装依赖，")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("yarn config set yarn-offline-mirror ./npm-packages-offline-cache\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("npm install -g yarn\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("em",[this._v("注意：通常情况下不建议通过 npm 进行安装。npm 安装是非确定性的，程序包没有签名，并且 npm 除了做了基本的 SHA1哈希之外不执行任何完整性检查，这给安装系统程序带来了安全风险。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("em",[this._v("基于这些原因，强烈建议你通过最适合于你的操作系统的安装方法来安装 yarn。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"pnpm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pnpm","aria-hidden":"true"}},[this._v("$")]),this._v(" pnpm")])},function(){var t=this.$createElement,e=this._self._c||t;return e("sup",{staticClass:"footnote-ref"},[e("a",{attrs:{href:"#fn3",id:"fnref3"}},[this._v("[3]")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("npm install -g pnpm\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("pnpm i foo\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"pnpm-的几个特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pnpm-的几个特性","aria-hidden":"true"}},[this._v("$")]),this._v(" pnpm 的几个特性")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("**安全 **。 像 Yarn 一样，pnpm 有一个特殊的文件，其中包含所有安装包的校验码，以在代码执行之前验证每个已安装包的完整性。")]),e("li",[this._v("**离线模式 **。 pnpm 将所有下载的软件包 tar 包保存在本地镜像仓库中。 当一个包在本地可用时，它从不发出请求。 使用 --offline 参数，HTTP 请求可以被完全禁止。")]),e("li",[this._v("**速度 **。 pnpm 不仅比 npm 快，而且比 Yarn 还要快。 它比 cold 和 hot 缓存 Yarn 都快。 Yarn 从缓存拷贝文件，而 pnpm 只是从全局存储目录链接它们。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"pnpm-的目录树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pnpm-的目录树","aria-hidden":"true"}},[this._v("$")]),this._v(" pnpm 的目录树")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("-> - a symlink (or junction on Windows)\n\nnode_modules\n├─ foo -> .registry.npmjs.org/foo/1.0.0/node_modules/foo\n└─ .registry.npmjs.org\n   ├─ foo/1.0.0/node_modules\n   |  ├─ bar -> ../../bar/2.0.0/node_modules/bar\n   |  └─ foo\n   |     ├─ index.js\n   |     └─ package.json\n   └─ bar/2.0.0/node_modules\n      └─ bar\n         ├─ index.js\n         └─ package.json\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"一些错误的探究"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一些错误的探究","aria-hidden":"true"}},[this._v("$")]),this._v(" 一些错误的探究")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"npm-err-write-after-end"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm-err-write-after-end","aria-hidden":"true"}},[this._v("$")]),this._v(" [npm ERR!] write after end")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("今天安装 npm 依赖的时候，出现了 "),e("code",[this._v("write after end")]),this._v(" 的错误，使用 yarn 没问题。查阅资料，解决方案如下:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("npm i -g npm@5.6.0  \n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料","aria-hidden":"true"}},[this._v("$")]),this._v(" 参考资料")])}],!1,null,null,null);e.default=s.exports}}]);